/*
 * -------------------------------------------------
 *  nf-core/dualrnaseq Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  genome_host = 'GRCh38'
  genome_pathogen = 'SL1344'

  // Workflow flags
  outdir = '/vol/projects/bmikagos/Dual_RNA_seq/Dual_RNA_seq/results_hela_Salmonella2'

 // reads = "data/*{1,2}.fastq.gz"
  reads = "/vol/projects/bmikagos/Dual_RNA_seq_data/hela_Salmonella/fastq/*.fq.gz" 
  readPaths = null
  single_end = true

  // Options: cutadapt
  params.adapter_seq_3 = "AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC"
  params.adapter_seq_3_forward = "AGATCGGAAGAGCACACGTCTGAACTCCAGTCA"
  params.adapter_seq_3_reverse = "AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT"


  // Options: Salmon
  params.salmon = true
  params.read_from_file_transcriptome_fasta_host = false
  params.read_from_file_transcriptome_fasta_pathogen = false
  params.gene_attribute_gff_to_create_transcriptome_host = "transcript_id"
  params.gene_attribute_gff_to_create_transcriptome_pathogen = "locus_tag"
  params.gene_feature_gff_to_create_transcriptome_host = ["transcript", "tRNA"]
  params.gene_feature_gff_to_create_transcriptome_pathogen = ["gene","sRNA","tRNA","rRNA"]
  params.sample_conditions = ["HeLa_S3_mock_02_h_", "HeLa_S3_mock_04_h_", "HeLa_S3_mock_08_h_","HeLa_S3_mock_16_h_", "HeLa_S3_mock_24_h_", "HeLa_S3_WT_00_h_", "HeLa_S3_WT_02_h_", "HeLa_S3_WT_04_h_", "HeLa_S3_WT_08_h_", "HeLa_S3_WT_16_h_", "HeLa_S3_WT_24_h_"]

  // Options: STAR
  params.star = true

  // Options: HTSeq
  params.htseq_unique_mapping = true
  params.htseq_multi_mapping = false
  params.mapping_stats = true
  params.gene_feature_gff_to_quantify_host = ["exon","tRNA"]
  params.gene_feature_gff_to_quantify_pathogen = ["gene", "sRNA", "tRNA", "rRNA"]
  params.host_gff_atribute = "gene_id"
  params.pathogen_gff_atribute = "locus_tag"

  params.RNA_classes_to_replace_host = "data/RNA_classes_to_replace.csv"


  // Options: Custom config
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false


  // Options: Other
  name = false
  multiqc_config = false
  email = false
  email_on_fail = false
  max_multiqc_email_size = 25.MB
  plaintext_email = false
  monochrome_logs = false
  help = false
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  tracedir = "${params.outdir}/pipeline_info"
  igenomes_ignore = true
  // Defaults only, expecting to be overwritten
  max_memory = 100.GB
  max_cpus = 30
  max_time = 240.h

}

workDir = '/vol/projects/bmikagos/Dual_RNA_seq/Dual_RNA_seq/work'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

includeConfig 'conf/computing_platform.config'


// Load genomes.config or igenomes.config
if (!params.igenomes_ignore) {
  includeConfig 'conf/igenomes.config'
} else {
  includeConfig 'conf/genomes.config'
}



// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
//process.container = 'nfcore/dualrnaseq:dev'
//process.container = 'nfcore/dualrnaseq:dev'


/*
// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/NAME custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/pipeline/NAME.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config/NAME profiles: ${params.custom_config_base}/pipeline/NAME.config")
}

*/





profiles {

/*
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
*/

  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    singularity.cacheDir = "/vol/cluster-data/bmikagos/"
  
  }
  test { includeConfig 'conf/test.config' }
}




// Export this variable to prevent local Python libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/dualrnaseq'
  author = 'Bozena Mika-Gospodorz'
  homePage = 'https://github.com/nf-core/dualrnaseq'
  description = 'Dual RNA-seq pipeline '
  mainScript = 'main.nf'
  nextflowVersion = '>=19.04.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
